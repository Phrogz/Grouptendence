%p#showinfo
	%button Show Event Info

#overview
	#location!= markdown(@event.location)
	#description!= markdown(@event.description)

YaIn, #{@user}? (<a href="/name">Change Name</a>)

- upcoming = @event.upcoming
- unless upcoming.empty?
	%table#signups
		%thead
			%th
			%th
			%th.confirmed <span>yes</span>
			%th.tentative <span>maybe</span>
			%th.declined <span>no</span>
			%th <span>who?</span>
		%tbody
			- upcoming.each do |time|
				!= partial :_event_row, time:time, user:@user
- else
	%p.exception No upcoming events; ask an admin to add some.

#attendeebox
	%table#attendees
		%tr.confirmed
			%th
				%img.dot(src='images/confirmed.png' title='Confirmed')
			%td
		%tr.tentative
			%th
				%img.dot(src='images/tentative.png' title='Tentative')
			%td
		%tr.declined
			%th
				%img.dot(src='images/declined.png' title='Declined')
			%td
	#noattendees.exception no attendees&hellip;yet

%script
	:plain
		signups.addEventListener('click', (evt) => {
			const el = evt.target
			switch (el.tagName) {
				case 'IMG':
					cycleConfirmation(el)
				break
				case 'BUTTON':
					showAttendees(el)
				break
			}
		})
		document.body.addEventListener('click', _ => attendeebox.style.display='none', false)
		showinfo.addEventListener('click', showInfo, false)

		function cycleConfirmation(el) {
			const row = el.closest('[data-time]')
			if (row) {
				post('/signup', row.dataset)
				.then(data => {
					if (data.rowHTML) {
						row.outerHTML = data.rowHTML
						el.src = el.src.replace(/\w+.png/, `${data.status.toLowerCase()}.png`)
						el.title = data.status
					}
				})
			}
		}

		function showAttendees(el) {
			const row = el.closest('[data-time]')
			if (row) {
				get(`/attendees/${row.dataset.time}`)
				.then(data => {
					attendeebox.style.display = 'block'
					noattendees.style.display = !Object.keys(data).length ? 'block' : 'none'
					Array.from(attendees.rows).forEach(row => {
						const attendees = data[row.className]
						row.style.display = attendees ? '' : 'none'
						if (attendees) row.cells[1].innerHTML = attendees.join(', ')
					})
					'confirmed tentative declined'.split(' ').forEach(status => {
						attendees.querySelector(`tr.${status} `)
					})
				})
			}
		}

		function showInfo() {
			showinfo.style.display = 'none'
			overview.style.display = 'block'
		}

		async function post(url='', data={}) {
			const response = await fetch(url, {
				method: 'POST',
				mode:   'no-cors',
				cache:  'no-cache',
				headers:{'Content-Type':'application/x-www-form-urlencoded'},
				body:   new URLSearchParams(data)
			})
			return response.json()
		}

		async function get(url='') {
			const response = await fetch(url, {
				method: 'GET',
				mode:   'no-cors',
				cache:  'no-cache',
			})
			return response.json()
		}
